// Generated by pyang using openconfig https://github.com/openconfig/public.
//
// Copyright 2018 openconfigd project.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package config

import (
	"fmt"
)

func mapkey(index int, name string) string {
	if name != "" {
		return name
	}
	return fmt.Sprintf("%v", index)
}

// typedef for identity plist:action.
type Action string

const (
	ACTION_PERMIT Action = "permit"
	ACTION_DENY   Action = "deny"
)

var ActionToIntMap = map[Action]int{
	ACTION_PERMIT: 0,
	ACTION_DENY:   1,
}

func (v Action) ToInt() int {
	i, ok := ActionToIntMap[v]
	if !ok {
		return -1
	}
	return i
}

var IntToActionMap = map[int]Action{
	0: ACTION_PERMIT,
	1: ACTION_DENY,
}

func (v Action) Validate() error {
	if _, ok := ActionToIntMap[v]; !ok {
		return fmt.Errorf("invalid Action: %s", v)
	}
	return nil
}

// struct for container plist:seq.
// sequence number of an entry.
type Seq struct {
	// original -> plist:number
	Number uint32 `mapstructure:"number" json:"number,omitempty"`
	// original -> plist:action
	Action Action `mapstructure:"action" json:"action,omitempty"`
	// original -> plist:prefix
	// plist:prefix's original type is inet:ipv4-prefix.
	Prefix string `mapstructure:"prefix" json:"prefix,omitempty"`
	// original -> plist:ge
	// Minimum prefix length to be matched.
	Ge *int `mapstructure:"ge" json:"ge,omitempty"`
	// original -> plist:le
	// Maximum prefix length to be matched.
	Le *int `mapstructure:"le" json:"le,omitempty"`
	// original -> plist:eq
	// Maximum prefix length to be matched.
	Eq *int `mapstructure:"eq" json:"eq,omitempty"`
}

func (lhs *Seq) Equal(rhs *Seq) bool {
	if lhs == nil || rhs == nil {
		return false
	}
	if lhs.Number != rhs.Number {
		return false
	}
	if lhs.Action != rhs.Action {
		return false
	}
	if lhs.Prefix != rhs.Prefix {
		return false
	}
	if lhs.Ge != nil && rhs.Ge != nil {
		if *lhs.Ge != *rhs.Ge {
			return false
		}
	}
	if lhs.Ge == nil && rhs.Ge != nil {
		return false
	}
	if lhs.Ge != nil && rhs.Ge == nil {
		return false
	}
	if rhs.Le != nil && rhs.Le != nil {
		if *lhs.Le != *rhs.Le {
			return false
		}
	}
	if lhs.Le == nil && rhs.Le != nil {
		return false
	}
	if lhs.Le != nil && rhs.Le == nil {
		return false
	}
	if rhs.Eq != nil && rhs.Eq != nil {
		if lhs.Eq != rhs.Eq {
			return false
		}
	}
	if lhs.Eq == nil && rhs.Eq != nil {
		return false
	}
	if lhs.Eq != nil && rhs.Eq == nil {
		return false
	}
	return true
}

// struct for container plist:prefix-list.
type PrefixList struct {
	// original -> plist:name
	Name string `mapstructure:"name" json:"name,omitempty"`
	// original -> plist:description
	// Prefix-list specific description.
	Description string `mapstructure:"description" json:"description,omitempty"`
	// original -> plist:seq
	// sequence number of an entry.
	SeqList []Seq `mapstructure:"seq" json:"seq,omitempty"`
}

type PrefixLists []PrefixList

// type PrefixLists struct {
// 	// original -> plist:name
// 	PrefixLists []PrefixList `mapstructure:"prefix-lists" json:"name,omitempty"`
// }

func (lhs *PrefixList) Equal(rhs *PrefixList) bool {
	if lhs == nil || rhs == nil {
		return false
	}
	if lhs.Name != rhs.Name {
		return false
	}
	if lhs.Description != rhs.Description {
		return false
	}
	if len(lhs.SeqList) != len(rhs.SeqList) {
		return false
	}
	{
		lmap := make(map[string]*Seq)
		for i, l := range lhs.SeqList {
			lmap[mapkey(i, string(l.Number))] = &lhs.SeqList[i]
		}
		for i, r := range rhs.SeqList {
			if l, y := lmap[mapkey(i, string(r.Number))]; !y {
				return false
			} else if !r.Equal(l) {
				return false
			}
		}
	}
	return true
}
